@document.meta
title: Representação digital de informação
author: João Capucho
@end

* Introdução (ou o porquê)

  A informação no mundo real é contínua ou seja tem "infinitas" casas decimais
  de precisão. No entanto os computadores apresentam um número limitado de
  memória, logo é necessário fazer algumas concessões para representar a informação
  nos computadores.

  A primeira concessão feita é o bit, esta é a menor unidade de informação
  representada e tem dois estados 1 (true/on) e 0 (false/off), esta concessão é
  feita pois simplifica em muito o design das lógicas dos computadores em vários
  níveis.

  A segunda concessão é a discretização da informação, ou seja transformar dados
  contínuos em dados discretos representando apenas certos pontos de interesse.
  Por exemplo para representar a temperatura num termostato digital podemos apenas
  representar a temperatura com um grau decimal de precisão (i.e. 23.4°).

** Quantidade de informação

   Para calcular quantos estados diferentes é possível representar com $N$
   níveis (ou bits), pode-se utilizar a seguinte fórmula.

   @math
   D = \log_2 N
   @end

   Onde $D$ é então o número de estados.

* Glossário

  Os seguintes termos são usados e podem aparecer noutros sítios.

  $ byte
  Conjunto de 8 bits, pode representar $2^8 = 256$ estados diferentes
  $ nibble
  Conjunto de 4 bits, pode representar $2^4 = 16$ estados diferentes
  $ word
  Um processador opera sobre words, words são um conjunto de bits de
  tamanho específico a plataforma mas variam entre plataformas, o
  tamanho mais comum é 64 bits (i.e. processadores de 64 bits).
  $ lsb
  O Least Significant bit ou bit menos significativo é o bit num grupo
  de bits que têm menos peso no número (ie. está mais a direita).
  $ msb
  O Most Significant bit ou bit mais significativo é o bit num grupo
  de bits que têm o maior peso no número (ie. está mais a esquerda).

* Representação de inteiros

  O primeiro bocado de informação que queremos representar são os números
  inteiros pois a partir destes podemos representar outros tipos de informação.

** Bases

   Um número pode ser representado em diferentes bases\: $10_{10}$, $\mathtt{A}_{16}$
   e $1010_2$ são todos representações equivalentes do mesmo número.

   A base $10$ é a mais comum e foi criada porque temos 10 dedos, a base $2$
   é utilizada pelos computadores pois cada digito pode ser representado por
   um bit, e a base $16$ é utilizada na programação de computadores pois
   representa de maneira mais clara um grupo de 4 bits (ou um nibble).

   Num número a base representa o peso de cada digito no número final, por
   exemplo para $127_{10}$, podemos decompor nos seus dígitos.

   @math
   127_{10} = 1 \times 10^2 + 2 \times 10^1 + 7 \times 10^0
   @end

   Cada dígito têm então um peso da sua base elevada a posição do digito no
   número (a posição começa em zero).

   No entanto com todas estas bases surge o problema de converter entre elas.

*** Conversão de base n para base 10

    Já vimos como converter de uma base qualquer $n$ para base $10$, basta
    multiplicar cada dígito pela base elevada a posição do dígito no número.

    @math
    10101_{2} = 2^4 + 2^2 + 2^0 = 16 + 4 + 1 = 21
    @end

    @math
    \mathtt{1B2}_{16} = 1 \times 16^2 + 11 \times 16^1 + 2 \times 16^0
    = 256 + 176 + 2 = 434
    @end

*** Conversão de base n para 2

    A conversão de uma base qualquer $n$ para $2$ já é mais complicada, é
    necessário realizar divisões sucessivas por 2 até o quociente ser 0,
    depois o número em binário será o resto das divisões ordenado pela ordem
    contrária das divisões (o primeiro bit é o resto da última divisão e
    o último bit é o resto da primeira divisão).

    @embed image
    assets/repeated-divsion.png
    @end

*** Conversão entre base 16 e base 2

	A conversão de base 16 para base 2 é bastante simples visto que cada
    dígito em base 16 corresponde a 4 bits (dígitos em base 2), bastando
    então utilizar a seguinte tabela para converter entre as duas.

    @table
    Hexadecimal (base 16) | Binário (base 2) | Decimal (base 10)
    0 | 0000 | 0
    1 | 0001 | 1
    2 | 0010 | 2
    3 | 0011 | 3
    4 | 0100 | 4
    5 | 0101 | 5
    6 | 0110 | 6
    7 | 0111 | 7
    8 | 1000 | 8
    9 | 1001 | 9
    A | 1010 | 10
    B | 1011 | 11
    C | 1100 | 12
    D | 1101 | 13
    E | 1110 | 14
    F | 1111 | 15
    @end

    @math
    \mathtt{1B2}_{16} = 0001\;1011\;0010_2
    @end

    Depois para converter de volta para base 16, basta fazer o inverso,
    dividimos o número binário em grupos de 4 bits e convertemos cada um
    para o dígito hexadecimal correspondente.

    @math
    0101\;1001\;1010_{2} = \mathtt{59A}_{16}
    @end

	Os mesmos métodos podem-se aplicar a base 8, no entanto em vez de considerar
    4 bits de uma só vez consideramos apenas 3.

** Adição

   Agora que já conseguimos expressar número positivos em binário, queremos operar
   sobre eles, a operação mais fundamental que se pode fazer com números é a adição.

   A adição entre dois números binários, realiza-se de modo semelhante a adição normal
   soma-se os bits da direita para a esquerda e se a soma for maior que a quantidade
   representável num dígito (no caso de binário for maior que 1) carrega-se um 1 para
   a próxima soma.

   @embed image
   assets/soma-binaria.png
   @end

   Os 1s que são carregadas para o bit seguinte são chamados de *carry*.

*** Overflow

	Dado o número limitado de bits que estão disponíveis para representar um número,
    pode ocorrer que a soma de dois números retorne um valor que é maior dos que são
    possíveis representar. Esses bits serão truncados e o valor retornado da soma
    estará incorreto, a esta situação chama-se de overflow

    @embed image
    assets/overflow.png
    @end

    O overflow acontece quando a soma tem mais bits dos que estão disponíveis para
    representar um número.

** Números negativos

   Até agora vimos como representar inteiros positivos, no entanto os números
   negativos são também bastante uteis, logo é do nosso interesse também
   representá-los.

   Existem várias maneiras de representar números negativos, mas todas elas
   requerem um número fixo de bits para representar o número, logo antes de
   poderemos analisar um número precisamos não só de saber o tipo de representação
   utilizada mas também o número de bits usados.

*** Sinal e Módulo

	A maneira mais intuitiva de representar um número negativo é adicionando um
	bit para representar o sinal, podendo assim distinguir entre negativo e positivo.
	Sendo assim um número teria a seguinte representação.

	@embed image
    assets/Sinal-Módulo.excalidraw
	@end

	$N$ é o número de bits do número, o sinal consome 1 bit e um valor de 0 representa
	um número positivo enquanto que um valor de 1 representa um número negativo, os
	restantes bits representam o módulo do número.

	Os seguintes são exemplos de alguns números em base 10 convertidos para binário
	com a representação Sinal e Módulo utilizando 8 bits.

	@math
	\begin{align*}
	+17_{10} &= 0001 0001 \\
	-17_{10} &= 0001 0001 \\
	+127_{10} &= 0111 1111 \\
	-127_{10} &= 1111 1111
	\end{align*}
	@end

	Apesar desta representação ser bastante intuitiva, apresenta algums problemas em
	termos de utilização num computador. O primeiro deles é a dupla representação do
	zero, com esta representação o zero pode ser representado de duas maneiras.

	@math
	\begin{align*}
	+0_{10} &= 0000 0000 \\
	-0_{10} &= 1000 0000
	\end{align*}
	@end

	Isto não só desperdiça um estado possível, mas também dificulta a comparação entre
	números visto que as duas representações são iguais simbolicamente mas em termos
	de bits são diferentes.

	O segundo problema é que a realização de cálculos também se torna difícil, visto que
	já não é possível somar diretamente os dois números, sendo necessário primeiro
	verificar os seus sinais.

*** Complemento para 2

	Os problemas presentes na representação anterior levaram a criação de outra
	representação, complemento para 2, esta representação é quase idêntica a
	representação para números positivos, exceto que o bit mais significativo
	têm agora um peso negativo. Por exemplo o seguinte número representado em
	complemento para 2 com 8 bits.

    @math
	1101 1011_{2} = -2^7 + 2^6 + 2^4 + 2^3 + 2^1 + 2^0 = -37
    @end

	O mais significativo têm então um peso de $-2^{N-1}$.

	Esta representação já não têm os problemas da anterior, o 0 só têm uma
	representação (todos os bits a zero), e a adição pode ser feita
	diretamente. Além disso a subtração é também mais fácil de fazer, pois
	apenas é necessário negar o número a direita e adicioná-lo com o número
	a esquerda da subtração.

	A negação em si, apesar de ser um pouco mais complicada do que na representação
	sinal e módulo em que bastava inverter um bit, é bastante simples. Basta inverter
	todos os bits e somar um. Dá se o seguinte exemplo para uma negação com 8 bits.

    @math
	-3_{10} = - 0000 0011_2 = \overline{0000 0011_2} + 1 = 1111 1100_2 + 1 = 1111 1101_2
    @end

**** Overflow

	 Os overflows também acontecem em operações com números em complemento para 2. No
	 entanto a sua detecção é mais complicada, para número positivos bastava verificar
	 se havia carry no bit mais significativo, mas agora essa situação pode acontecer
	 para contas sem overflow, observe-se a seguinte adição entre dois números de
	 4 bits em complemento para 2.

	 @embed image
	 assets/no-overflow-2bc.png
	 @end

	 Esta adição está correta apesar de haver carry no bit mais significativo e o bit
	 extra ter sido truncado. Mas a seguinte adição não têm o carry no bit mais
	 significativo e têm um overflow.

	 @embed image
	 assets/overflow-2bc.png
	 @end

	 Sendo assim é necessário um conjunto de regras diferentes para detetar overflows
	 em números em complemento para 2, essas regras são:

	 - Um overflow ocorre na soma de dois números positivos se o resultado for um número
	negativo.
	 - Um overflow ocorre na soma de dois números negativos se o resultado for um número
	positivo.
	 - Um overflow nunca ocorre na soma de dois números com sinal diferente.

**** Extensão de sinal

	 Os números em complemento para 2 apresentam um número de bits fixo, no entanto pode
	 haver casos onde é necessário estender estes números para mais bits. Em números sem
	 sinal bastava adicionar zeros a esquerda. Mas para números em complemento para 2 isso
	 poderia resultar no sinal inverter-se.

	 Logo um método diferente de extensão é utilizado, onde o bit mais significativo
	 (o com peso negativo) é estendido para a esquerda, logo repete-se um 0 se o
	 número é positivo ou um 1 se o número é negativo.

	 Seguem-se exemplos de extensão de 4 bits para 8 bits.

	 @math
	 \begin{align*}
	 +3_{10} &= 0011_2 \rightarrow 0000 0011_2 \\
	 -3_{10} &= 1101_2 \rightarrow 1111 1101_2 \\
	 +7_{10} &= 0111_2 \rightarrow 0000 0111_2 \\
	 -7_{10} &= 1001_2 \rightarrow 1111 1001_2
	 \end{align*}
	 @end

** Gama de representação

   Como já vimos os números representados no computador têm um número limitado de bits
   e diferente representações usam-os de diferentes maneiras resultando em diferentes
   estados que conseguem representar.

   Logo faz sentido falar da gama de representação ou os diferentes estados que uma dada
   representação consegue representar com $N$ bits, a tabela seguinte mostra a gama de
   representação para as representações que falamos até agora.

   : A1 : Representação
   : A2 : Menor representável
   : A3 : Maior representável
   : B1 : Sem sinal
   : B2 : $0$
   : B3 : $2^N -1$
   : C1 : Sinal e módulo
   : C2 : $|-\left(2^{N -1} - 1 \right)|$
   : C3 : $2^{N - 1}-1$
   : D1 : Complemento para 2
   : D2 : $-2^{N -1}$
   : D3 : $2^{N - 1}-1$

* Representação de reais

  Algumas quantidades precisam de ser representadas como reais (ou fazem mais sentido
  ser representadas deste modo), logo necessitamos de encontrar maneiras de representá-los.

** Vírgula fixa

   A representação mais intuitiva é igual a que usamos para números decimais normalmente,
   definimos um ponto onde a esquerda temos a parte inteira e a direita a parte fracionária.

   Em decimal temos por exemplo $20.43$ onde $20$ é a parte inteira e $43$ a parte
   fracionária, podemos decompor este número nos seus dígitos a multiplicar pela base
   elevada a posição do digito, mas agora a posição começa na vírgula e é negativa atrás
   dela.

   @math
   20.43 = 2\times10^1 + 0\times10^0 + 4\times10^{-1} + 3\times10^{-2}
   @end

   Em binário utilizamos o mesmo conceito mas a posição da vírgula têm que ser definida
   previamente, por exemplo com 16 bits e vírgula no meio (entre o bit 7 e 8).

   @math
   0001 0100 0010 1011_2 = 2^4 + 2^2 + 2^{-2} + 2^{-4} + 2^{-6} + 2^{-7} = 20.3359375
   @end

   Nesta representação o maior e menor valor representáveis dependem da quantidade de bits
   na parte inteira. A precisão depende do número de bits para a parte fracionária.

*** Conversão a partir de um decimal em base 10

	A parte inteira pode ser convertida normalmente. Para converter a parte fracionária
	utiliza-se um algoritmo semelhante ao de conversão da parte inteira, mas em vez de
	dividir, multiplica-se os números. O algoritmo é então o seguinte:

	- Multiplicar a parte fracionária por 2.
	- Repetir com o resultado da multiplicação até a parte fracionária ser 0.
	- As partes inteiras das multiplicações são os bits pela ordem da primeira
	  para a última multiplicação.

	O seguinte exemplo converte o número $9.125$ para um número de vírgula fixa binária com
	8 bits para a parte inteira e 8 bits para a parte fracionária.

	@embed image
    assets/Vírgula-Fixa-Conversão.excalidraw
	@end

*** Problema

	A representação em virgula fixa binária precisa de muitos dígitos para representar
	números muitos grandes ou com muita precisão, no entanto muitas vezes estas situações
	são opostas, ou seja, quando se quer representar um número muito grande a precisão é
	menos importante e quando a precisão é importante o número é mais pequeno.

** Vírgula Flutuante

   O modelo de virgula flutuante baseia-se na notação científica, nesta o número é
   representado como $a \times 10^b$, onde $a$ chama-se de mantissa e $b$ é o expoente,
   $10$ é a base utilizada.

   A notação científica permite facilmente representar números muito grandes ou muitos
   pequenos sem utilizar muitos dígitos de informação. Logo a vírgula flutuante é um
   formato onde a mantissa e o expoente são usados para representar o número (a base
   é definida implicitamente como $2$).

   Existe um formato definido internacionalmente chamado IEEE 754 que especifica
   a representação exata de números binários em virgula flutuante com vários
   níveis de precisão e as operações sobre eles. Os níveis mais comuns são o de
   precisão simples que utiliza 32 bits e o de precisão dupla que usa 64 bits.

   @embed image
   assets/IEEE-754-format.excalidraw
   @end

   No nível de precisão simples o expoente usa 8 bits e a mantissa 23 bits, o
   nível de precisão dupla usa 11 bits para o expoente e 52 bits para a mantissa,
   adicionalmente existe 1 bit para o sinal. O formato apresenta ainda mais alguns
   valores implícitos para o tornar mais compacto, a mantissa apresenta um 1 sempre
   a esquerda da vírgula implicitamente (este não é representado no código binário),
   além disso, o expoente não é definido diretamente mas em relação a um "bias":

   @math
   X = (-1)^S * \text{mantissa} * 2^{\text{exp} - \text{bias}}
   @end

   Onde $S$ é o sinal, $exp$ o expoente e $bias$ o "bias", o "bias" é 127 para
   números de precisão simples e 1023 para precisão dupla.

*** Conversão a partir de um decimal em base 10

	A conversão é mais complicada quando comparada a um número de vírgula fixa.
	Os primeiros passos são idênticos, mas de seguida é necessário calcular o
	expoente de modo a que a vírgula fica após o primeiro $1$, de seguida adiciona-se
	o "bias" ao expoente, para obter a representação final deste. De seguida utiliza-se
	a mantissa do valor calculado no passo anterior (sendo que o $1$ antes da vírgula
	não se representa). Finalmente define-se o bit do sinal.

	Mais uma vez temos o exemplo do $9.125$ para precisão simples.	

   @embed image
    assets/Vírgula-Flutuante-Conversão.excalidraw
   @end

*** Casos especiais

	O número zero possuem uma representação especial pois caso contrário existiram várias
	maneiras de o representar o que traria problemas, para representar um zero todos os
	bits são definidos como 0.

	O infinito e menos infinitos também possuem representações, nestas o expoente tens os
	seus bits todos a 1 e a mantissa definida a zeros, o sinal é o mesmo que o infinito que
	se pretende representar.

	Finalmente existe mais uma representação especial chamada NaN (or Not a Number, inglês
	para um não número), este número aparece quando operações inválidas são executadas
	(como uma divisão por zero. Um NaN tem todos os bits do expoente a 1 e a mantissa com
	um valor não nulo (o sinal é ignorado).

	@embed image
    assets/IEEE-754-special-cases.excalidraw
	@end

* Representação de Caracteres

  Outro valor importante de representar são caracteres usados no alfabeto, fazendo assim
  possível armazenar texto. Existem vários standards para representar caracteres, sendo
  os dois mais comuns ASCII e Unicode.

** ASCII

   ASCII (ou American Standard Code for Information Interchange) é dos dois o standard
   mais antigo, cada carácter ocupa 7 bits (sendo comum adicionar um bit extra, que não
   é usado, para arrendondar). É possível representar 95 caracteres que vão desde letros
   do alfabeto a números e símbolos de pontuação. Além disso são definidos 33 caracteres
   de "controlo", como o "Esc" e o "Del".

   O standard ASCII foi definido apenas para representar o alfabeto inglês e como tal é
   menos utilizado atualmente pois não é utilizável por outras línguas.

** Unicode

   O standard Unicode é mais recente e foi criado de forma a ser extensível e suportar
   várias línguas. O standard em si não é uma representação mas sim um conjunto de
   /codepoints/ que são um valor númerico associado a um caractere. Existem várias
   representações que são associadas ao Unicode sendo uma das mais comuns o UTF-8 pois
   é bastante compacta quando comparada com as alternativas e é compatível com código ASCII.
