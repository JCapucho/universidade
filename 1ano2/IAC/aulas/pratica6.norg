@document.meta
title: Prática 6
author: João Capucho
@end

* Exercício 1 \- Instruções lógicas

** Exercício 1.1

   > Codifique um programa em Assembly que a partir do valor de dois operandos presentes
	 em $t0 e $t1 calcule o resultado do AND, OR, NOR e XOR e guarde os resultados em
	 $t2, $t3, $t4 e $t5, respetivamente..

   @code mips
     .text
     .global main
   main:
     and $t2,$t0,$t1
     or  $t3,$t0,$t1
     nor $t4,$t0,$t1
     xor $t5,$t0,$t1
   @end

** Exercício 1.2

   > Teste o programa e confirme manualmente os resultados para os seguintes pares de valores:
   > $t0 = 0x12345678, $t1 = 0x0000000F
   > $t0 = 0x12345678, $t1 = 0x0000F000
   > $t0 = 0x12345678, $t1 = 0x0000ABCD

** Exercício 1.3

   > Como poderia implementar a operação de negação bit a bit do registo $t0 e
	 armazenar o resultado em $t6?

   A arquitetura mips não possui nenhuma instrução de negação (existe uma
   pseudo-instrução `not`), para a implementar vamos ter que utilizar outra
   instrução.

   Neste caso vamos utilizar a operação `nor` com o registo 0 como segundo
   operando, isto é equivalente a um `not`.

   @code mips
   nor $t6,$t0,$zero
   @end

* Exercício 2 \- Instruções de deslocamento lógico e aritmético

  > O MIPS disponibiliza três instruções de deslocamento (shift): deslocamento
	à esquerda (lógico) e deslocamento à direita lógico e aritmético.

** Exercício 2.1

   > Escreva um programa que efectue as três operações de deslocamento considerando
	 como operando o registo $t0 e a constante Imm (número de bits a deslocar). Os
	 resultados devem ser guardados nos registos $t1, $t2 e $t3.

   @code mips
   sll $t1, $t0, 1
   srl $t2, $t0, 1
   sra $t3, $t0, 1
   @end

** Exercício 2.2

   > Teste o programa com os seguintes pares de valores e verifique manualmente
	 os resultados:
   > a) 0x12345678, 1
   > b) 0x12345678, 4
   > c) 0x12345678, 2
   > d) 0xF0000003, 4
	 
* Exercício 3 \- Chamadas ao sistema

** Exercício 3.1

   > Traduza para Asssembly e teste a seguinte sequência de código C:

   @code c
   print_string( “Introduza dois números :” );
   a = read_int();
   b = read_int();
   print_string( “A soma dos números e’: ” );
   print_int10( a + b )
   @end

   @code mips
     .data
   prompt:	.asciiz "Introduza dois números: "
   str:  	.asciiz "A soma dos números é: "
     .text
     .global main
   main:
     # print_string( “Introduza dois números: ” );
     li $v0, 4
     la $a0, prompt
     syscall
      
     # a = read_int();
     li $v0, 5
     syscall
     move $t0, $v0

     # b = read_int();
     li $v0, 5
     syscall
     move $t1, $v0

     # print_string( “A soma dos números e’: ” );
     li $v0, 4
     la $a0, str
     syscall

     # print_int10( a + b )
     li $v0, 1
     add $a0,$t0,$t1
     syscall
   @end

** Exercício 3.2

   > Teste o programa com valores a e b positivos e negativos.

** Exercício 3.3

   > Substitua a instrução `print_int10(a + b)` por `print_intu10(a + b)`. Repita os
	 testes da alínea anterior. O que acontece quando o resultado deveria ser negativo?

* Exercício 4

  > Usando máscaras e deslocamentos escreva um programa que imprima separadamente no
	ecrã em hexadecimal cada um dos dígitos hexadecimais do valor armazenado no registo
	$t1. Use como exemplo as instruções que se seguem:

  @code c
  print_int16((t1 & 0xF0000000) >> 28 ); print_char(‘ ‘);
  print_int16((t1 & 0x0F000000) >> 24 ); print_char(‘ ‘);
  ...
  @end

  @code mips
    .global main
  main:
    lui $t0, 0xF000
    and $t2, $t1, $t0
    srl $a0, $t2, 28
      
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    lui $t0, 0x0F00
    and $t2, $t1, $t0
    srl $a0, $t2, 24
  
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    lui $t0, 0x00F0
    and $t2, $t1, $t0
    srl $a0, $t2, 20
      
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    lui $t0, 0x000F
    and $t2, $t1, $t0
    srl $a0, $t2, 16
      
    # print_int16($a0)
    li $v0, 34
    syscall
  
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    andi $t2, $t1, 0xF000
    srl $a0, $t2, 12
  
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    andi $t2, $t1, 0x0F00
    srl $a0, $t2, 8
      
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    andi $t2, $t1, 0x00F0
    srl $a0, $t2, 4
      
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  
    andi $a0, $t1, 0x000F
  
    # print_int16($a0)
    li $v0, 34
    syscall
      
    # print_char(' ')
    li $v0, 11
    li $a0, ' '
    syscall
  @end

** Exercício 4.1

   > Que alterações seriam necessárias para imprimir o valor de $t1 em base 8?

   Invés de usar máscaras de 4 bits, as máscaras teriam de ser de 3 bits. E os
   shifts também teriam de ser feitos a cada 3 (invés a cada 4), começando com
   um shift de 30, pois o número mais significativo em base 8 só usa 2 bits. 
