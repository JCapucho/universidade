@document.meta
    title: Aula 07
    description: Let me grab a dictionary
    author: João Capucho
@end

* Exercício 1

  > Escreva um programa que determine a frequência de ocorrência de todas as~
  letras que ocorrem num ficheiro de texto. (Pode usar `c.isalpha()` para~
  verificar se um caráter `c` é uma letra).
  > O nome do ficheiro deve ser passado~
  como argumento na linha de comando (use `sys.argv`). Descarregue “Os Lusíadas”~
  ({documento 3333 do Projeto Gutenberg}[http://www.gutenberg.org/ebooks/3333.txt.utf-8])~
  e faça a contagem.
  > Ajuste o programa para não distinguir maiúsculas de~
  minúsculas. (Pode usar `s.lower()` para converter uma string `s` para~
  minúsculas.)
  > Finalmente, modifique o programa para mostrar o resultado por~
  ordem alfabética.

  @code python
  import sys


  # Calculate the frequency of letters in a file
  def countLetters(file):
      dict = {}
      # Loop trough each char in the file
      for line in file:
          for c in line:
              # Check if it's a letter
              if c.isalpha():
                  # Convert to lowercase and increase count
                  key = c.lower()
                  # Use `get` to get a default value in case the key isn't present
                  # in the dictionary
                  dict[key] = dict.get(key, 0) + 1
      return dict


  def main():
      # Check that exactly two arguments were passed:
      # program and filename
      if len(sys.argv) != 2:
          print("Use: program [file]")
          exit(1)

      with open(sys.argv[1], "r") as file:
          # Get a dictionary with the frequency of each letter
          lettersFreq = countLetters(file)
          # Iterate over the dictionary keys sorted
          for c in sorted(lettersFreq):
              # print the letter and their respective frequency
              print(f"{c} {lettersFreq[c]}")


  if __name__ == "__main__":
      main()
  @end

* Exercício 2

  > O programa `telefone.py` simula a lista de contactos de um telemóvel, ~
  implementada com um dicionário. O programa apresenta um menu com cinco~
  operações. A operação “Listar contactos” já está implementada. Experimente e ~
  analise o programa.

** Parte a)

   > Acrescente a operação de “Adicionar contacto”. Deve pedir um número e nome, e~
   acrescentá-los ao dicionário.

   @code python
   # SNIP
   def main():
       # SNIP
       while op != "T":
           op = menu()
           if op == "T":
                print("Fim")
           elif op == "L":
               print("Contactos:")
               listContacts(contactos)
           elif op == "A":
               # !!! NEW !!!
               number = input("número: ")
               name = input("nome: ")
               contactos[number] = name
           else:
               print("Não implementado!")
   @end

** Parte b)

   > Acrescente a operação de “Remover contacto”. Deve pedir o número e eliminar o~
   item correspondente. (Use o operador `del` ou o método `pop`.)

   @code python
   # SNIP
   def main():
       # SNIP
       while op != "T":
           op = menu()
           if op == "T":
                print("Fim")
           elif op == "L":
               print("Contactos:")
               listContacts(contactos)
           elif op == "A":
               number = input("número: ")
               name = input("nome: ")
               contactos[number] = name
           elif op == "R":
               # !!! NEW !!!
               number = input("número: ")
               del contactos[number]
           else:
               print("Não implementado!")
   @end

** Parte c)

   > Acrescente a operação “Procurar Número”. Deve pedir um número e mostrar o nome~
   correspondente, se existir, ou o próprio número, caso contrário.

   @code python
   # SNIP
   def main():
       # SNIP
       while op != "T":
           op = menu()
           if op == "T":
                print("Fim")
           elif op == "L":
               print("Contactos:")
               listContacts(contactos)
           elif op == "A":
               number = input("número: ")
               name = input("nome: ")
               contactos[number] = name
           elif op == "R":
               number = input("número: ")
               del contactos[number]
           elif op == "N":
               # !!! NEW !!!
               number = input("número: ")
               print(contactos.get(number, number))
           else:
               print("Não implementado!")
   @end

** Parte d)

   > Complete a função `filterPartName`, que dada uma string, deve devolver um~
   dicionário com os contactos `{número: nome}` cujos nomes incluam essa string.~
   Use essa função para implementar a operação “Procurar Parte do nome”, que~
   deve pedir um nome parcial e listar os contactos que o contêm.

   @code python
   def filterPartName(contacts, partName):
       """Returns a new dict with the contacts whose names contain partName."""
       searchResults = {}
       for (number, name) in contacts.items():
           if partName in name:
               searchResults[number] = name
       return searchResults

   # SNIP

   def main():
       # SNIP
       while op != "T":
           op = menu()
           if op == "T":
                print("Fim")
           elif op == "L":
               print("Contactos:")
               listContacts(contactos)
           elif op == "A":
               number = input("número: ")
               name = input("nome: ")
               contactos[number] = name
           elif op == "R":
               number = input("número: ")
               del contactos[number]
           elif op == "N":
               number = input("número: ")
               print(contactos.get(number, number))
           elif op == "P":
               # !!! NEW !!!
               partName = input("nome parcial: ")
               results = filterPartName(contactos, partName)
               listContacts(results)
           else:
               print("Não implementado!")
   @end

* Exercício 3

  > Adapte o programa anterior para ser possível associar a morada a um contacto.~
  Sugere-se que altere o dicionário para ter pares `(nome, morada)` como valores~
  associados às chaves. Altere a função de listagem para mostrar os dados em 3~
  colunas com larguras fixas, número ajustado à direita, nome centrado na~
  coluna, morada ajustada à esquerda. Faça também as adaptações necessárias nas~
  restantes operações.

  @code python
  def listContacts(dic):
      """Print the contents of the dictionary as a table, one item per row."""
      print("{:>12s} : {:^30} : {}".format("Numero", "Nome", "Morada"))
      for num in dic:
          contactData = dic[num]
          print("{:>12s} : {:^30} : {}".format(num, contactData[0], contactData[1]))


  def filterPartName(contacts, partName):
      """Returns a new dict with the contacts whose names contain partName."""
      searchResults = {}
      for (number, data) in contacts.items():
          if partName in data[0]:
              searchResults[number] = data
      return searchResults


  def menu():
      """Shows the menu and gets user option."""
      print()
      print("(L)istar contactos")
      print("(A)dicionar contacto")
      print("(R)emover contacto")
      print("Procurar (N)úmero")
      print("Procurar (P)arte do nome")
      print("(T)erminar")
      op = input("opção? ").upper()  # converts to uppercase...
      return op


  def main():
      """This is the main function containing the main loop."""

      contactos = {
          "234370200": ("Universidade de Aveiro", "Santiago, Aveiro"),
          "727392822": ("Cristiano Aveiro", "Leiria"),
          "387719992": ("Maria Matos", "Lisboa"),
          "887555987": ("Marta Maia", "Coimbra"),
          "876111333": ("Carlos Martins", "Porto"),
          "433162999": ("Ana Bacalhau", "Faro"),
      }

      op = ""
      while op != "T":
          op = menu()
          if op == "T":
              print("Fim")
          elif op == "L":
              print("Contactos:")
              listContacts(contactos)
          elif op == "A":
              number = input("número: ")
              name = input("nome: ")
              morada = input("morada: ")
              contactos[number] = (name, morada)
          elif op == "R":
              number = input("número: ")
              del contactos[number]
          elif op == "N":
              number = input("número: ")
              if number in contactos:
                  listContacts({number: contactos[number]})
              else:
                  print(number)
          elif op == "P":
              partName = input("nome parcial: ")
              results = filterPartName(contactos, partName)
              listContacts(results)
          else:
              print("Não implementado!")


  main()
  @end

* Exercício 4

  > Crie um programa que permita gerir um campeonato de futebol.

** Parte a)

   > O programa deverá pedir ao utilizador os nomes das equipas e guardá-los numa lista.

   @code python
   def insertTeamsList():
       teams = []
       while True:
           team = input("Insira uma equipa ou uma linha em branco: ")
           if team == "":
               break
           teams.append(team)
       return teams


   def main():
       teams = insertTeamsList()


   main()
   @end

** Parte b)

   > Use a função criada no exercício 4 da aula05 para gerar uma lista com todos os~
   jogos. Cada jogo é representado por um par `(equipa1, equipa2)`.

   @code python
   # SNIP

   def allMatches(teams):
       assert len(teams) >= 2, "Requires two or more teams!"
       games = []
       for i, team in enumerate(teams):
           for j, enemy in enumerate(teams):
               if i != j:
                   games.append((team, enemy))
       return games


   def main():
       teams = insertTeamsList()
       matches = allMatches(teams)
   @end

** Parte c)

   > O programa deverá perguntar ao utilizador o resultado de cada jogo (golos de~
   cada equipa) e registar essa informação num dicionário indexado pelo jogo.

   @code python
   # SNIP

   def insertMatchesResults(matches):
       results = {}
       for match in matches:
           print(f"Insira os resultado do jogo '{match[0]}' vs '{match[1]}'")

           while True:
               try:
                   house = int(input(f"Golos marcados por '{match[0]}': "))
                   guest = int(input(f"Golos marcados por '{match[1]}': "))
                   break
               except ValueError:
                   print("Insira valores válidos!")

           results[match] = (house, guest)

       return results


   def main():
       teams = insertTeamsList()
       matches = allMatches(teams)
       results = insertMatchesResults(matches)
   @end

** Parte d)

   > O programa deve manter uma tabela com o registo do número de vitórias, de~
   empates, de derrotas, o total de golos marcados e sofridos, e os pontos de~
   cada equipa. Com o resultado de cada jogo, deve atualizar os registos das~
   duas equipas envolvidas. O melhor é manter os registos noutro dicionário~
   indexado pela equipa.

   @code python
   # SNIP

   def calculateTeamsScore(results):
       teamsScore = {}

       for (match, result) in results.items():
           # Iterate over the two teams that participated in the match and
           # keep their index in the match
           for i, team in enumerate(match):
               # Get their record or initialize a new one
               record = teamsScore.setdefault(team, [0, 0, 0, 0, 0, 0])

               # Get the goals scored by the team we are currently processing
               thisGoals = result[i]
               # Get the goals scored by the other team, we use a modulus
               # operations to wrap back to the first teams goals when processing
               # the second team
               enemyGoals = result[(i + 1) % 2]

               # Update the goals scored and suffered
               record[3] += thisGoals
               record[4] += enemyGoals

               # Update the points and match results
               if thisGoals < enemyGoals:
                   record[2] += 1
               elif thisGoals > enemyGoals:
                   record[0] += 1
                   record[-1] += 3
               else:
                   record[1] += 1
                   record[-1] += 1

       return teamsScore


   def main():
       teams = insertTeamsList()
       matches = allMatches(teams)
       results = insertMatchesResults(matches)
       teamsScore = calculateTeamsScore(results)
   @end

** Parte e)

   > No final, apresente a tabela classificativa com as seguintes colunas: equipa, ~
   vitórias, empates, derrotas, golos marcados, golos sofridos e pontos.~
   Desafio: consegue ordenar a tabela por ordem decrescente de pontos?

   @code python
   # SNIP

   def listaClassif(teamsScore):
       sortedTeamsScore = sorted(
           teamsScore.items(), key=lambda record: record[1], reverse=True
       )
       print(
           "{:>12s} : Vitórias : Empates : Derrotas : Marcados : Sofridos : Pontos".format(
               "Equipa"
           )
       )
       for name, record in sortedTeamsScore:
           print(
               "{:>12s} : {:>8} : {:>7} : {:>8} : {:>8} : {:>8} : {:>6}".format(
                   name, *record
               )
           )


   def main():
       teams = insertTeamsList()
       matches = allMatches(teams)
       results = insertMatchesResults(matches)
       teamsScore = calculateTeamsScore(results)
       listaClassif(teamsScore)
   @end

** Parte f)

   > Finalmente, deverá apresentar a equipa campeã. A campeã é a equipa com mais~
   pontos ou, em caso de empate, a que tiver maior diferença entre golos~
   marcados e sofridos.

   @code python
   # SNIP

   def getChampion(teamsScore):
       maxPoints = 0
       maxDiff = 0
       champion = ""

       for name, record in teamsScore.items():
           diff = record[3] - record[4]

           if record[-1] > maxPoints:
               maxPoints = record[-1]
               champion = name
               maxDiff = diff
           elif record[-1] == maxPoints and diff > maxDiff:
               champion = name
               maxDiff = diff

       return champion


   def main():
       teams = insertTeamsList()
       matches = allMatches(teams)
       results = insertMatchesResults(matches)
       teamsScore = calculateTeamsScore(results)
       listaClassif(teamsScore)
       champion = getChampion(teamsScore)
       print(f"'{champion}' é a equipa campeã")
   @end

* Exercício 5

  > O ficheiro `nasdaq.csv` tem um registo das transações das ações de algumas~
  empresas ao longo de um mês na bolsa de valores NASDAQ. Cada linha do ficheiro~
  tem os campos seguintes, separados por TABs

  @code
  Empresa Data ValorAbertura ValorMaximo ValorMinimo ValorFecho Volume
  @end

  > O programa `stocks.py` tem uma função que lê esse ficheiro e devolve essa~
  informação numa lista de tuplos. Complete as funções que faltam para colocar o~
  programa a funcionar corretamente, *respeitando as invocações feitas na função*~
  `main()`.

** Parte a)

   > Complete a função `totalVolume(lst)` para devolver um dicionário com a~
   estrutura `{empresa: volumeTotal}`, que indique para cada empresa, qual o~
   volume total transacionado no período completo.

   @code python
   def totalVolume(lst):
       totVol = {}

       for transaction in lst:
           name = transaction[NAME]
           totVol[name] = totVol.get(name, 0) + transaction[VOLUME]

       return totVol
   @end

** Parte b)

   > Complete `maxValorization(lst)` para devolver um dicionário com a estrutura~
   `{data: (empresa, valorização)}` que, para cada data, indica qual a empresa~
   com maior valorização diária relativa ($\text{ValorFecho}/\text{ValorAbertura} - 100%$) e~
   qual essa valorização.

   @code python
   def maxValorization(lst):
       vMax = {}

       for transaction in lst:
           date = transaction[DATE]
           relVal = transaction[OPEN] / transaction[CLOSE] - 1

           lastMax = vMax.get(date, ("", -math.inf))[1]

           if relVal > lastMax:
               vMax[date] = (transaction[NAME], relVal)

       return vMax
   @end

** Parte c)

   > Complete `stocksByDateByName(lst)` para devolver a informação num dicionário~
   indexado por data e por nome da empresa.

   @code python
   def stocksByDateByName(lst):
       dic = {}

       for transaction in lst:
           date = transaction[DATE]
           name = transaction[NAME]

           dateDic = dic.setdefault(date, {})
           dateDic[name] = transaction

       return dic
   @end

** Parte d)

   > Complete a função que calcula o valor de uma dada carteira de ações (um~
   /portfólio/) de um investidor no fecho de uma dada data. A carteira de ações~
   deve ser um dicionário com o número de ações de cada título, e.g.:~
   `{'NFLX':100, 'CSCO':80}`.

   @code python
   def portfolioValue(stocks, portfolio, date):
       assert date in stocks
       val = 0.0

       stocksInDate = stocks[date]

       for company, transaction in stocksInDate.items():
           actions = portfolio.get(company, 0)
           val += actions * transaction[CLOSE]

       return val
   @end

* Exercício 6

  > O programa `coins.py` contém um conjunto de funções para gerir carteiras de~
  moedas. Cada carteira (bag) é representada por um dicionário que a cada tipo~
  de moeda associa o número dessas moedas na carteira. A lista `COINS` contém os~
  tipos de moedas válidas, por ordem decrescente de valor (em cêntimos).

** Parte a)

   > Complete a função `value(b)` para devolver o montante total na carteira `b`.

   @code python
   def value(bag):
       """Return total amount in a bag."""
       accum = 0
       for coin, amount in bag.items():
           accum += coin * amount
       return accum
   @end

** Parte b)

   > Complete a função `transfer1coin(b1, c, b2)` para tentar transferir uma moeda~
   de tipo `c` da carteira `b1` para a `b2`. Se `b1` não tiver moedas do tipo~
   `c`, a função deve devolver `False` e deixar as carteiras inalteradas. Se~
   tiver, deve devolver `True` e atualizar o número de moedas nas duas carteiras.

   @code python
   def transfer1coin(bag1, c, bag2):
       """Try to transfer one coin of value c from bag1 to bag2.
       If possible, transfer coin and return True, otherwise return False."""
       if c in bag1 and bag1[c] > 0:
           bag1[c] -= 1
           bag2[c] = bag2.get(c, 0) + 1
           return True

       return False
   @end

** Parte c)

   > Complete a função `transfer(b1, a, b2)` para tentar transferir um montante `a`~
   de `b1` para `b2`. Deve fazê-lo à custa de várias transferências de uma moeda~
   de cada vez. Se conseguir, a função deve devolver `True` e alterar as~
   carteiras. Se não, deve devolver `False` e manter as carteiras intactas.

   @code python
   def strbag(bag):
       """Return a string representing the contents of a bag."""
       first = True
       res = ""
       for c in COINS:
           amount = bag.get(c, 0)
           if amount > 0:
               if not first:
                   res += "+"
               else:
                   first = False

               res += f"{amount}x{c}"

       res += f"={value(bag)}"

       return res
   @end
