@document.meta
    title: Aula 08
    description: Ready Set go
    author: João Capucho
@end

* Exercício 1

  > O programa `imctable2.py` define uma lista com informação dos nomes, pesos e~
  alturas de diversas pessoas e usa uma list comprehension para obter uma lista~
  com os nomes apenas. Substitua as reticências por outras list comprehensions~
  que produzam:

** Parte a)

   > Uma lista com os valores de IMC de todas as pessoas.

   @code python
   def main():
       # SNIP
       imcs = [imc(w, h) for n, w, h in people]
       print("IMCs:", imcs)
       # SNIP
   @end

** Parte b)

   > Uma lista de tuplos das pessoas com altura superior a 1.7m.

   @code python
   def main():
       # SNIP
       tallpeople = [person for person in people if person[2] > 1.7]
       print("Tall people:", tallpeople)
       # SNIP
   @end

** Parte c)

   > Uma lista com os nomes das pessoas com IMC entre 18 e 25.

   @code python
   def main():
       # SNIP
       midimc = [n for n, w, h in people if 18 <= imc(w, h) <= 25]
       print("Mid-IMC:", midimc)
       # SNIP
   @end

* Exercício 2

  > O ficheiro `names.txt` tem uma lista de nomes completos de pessoas, com um~
  nome por linha. Escreva um programa que mostre, para cada apelido (último~
  nome), o conjunto de primeiros nomes encontrados na lista, sem repetições.

  @code python
  lastNames = {}
  with open("names.txt", "r") as file:
      file.readline()
      for line in file:
          parts = line.split()
          lastName = parts[-1]
          firstName = parts[0]
          names = lastNames.setdefault(lastName, set())
          names.add(firstName)

  for lastName, names in lastNames.items():
      print(f"{lastName} : {names}")
  @end

* Exercício 3

  > Crie uma função `primesUpTo(n)` que devolva um conjunto com todos os números~
  primos até `n`. Use o algoritmo do crivo de Eratóstenes: comece com o conjunto~
  ${2, 3, ..., n}$, depois elimine os múltiplos de 2 a começar em $2^2$, depois~
  elimine os múltiplos de 3 a começar em $3^2$ e assim sucessivamente. No fim, o~
  conjunto conterá apenas os primos.

  Naive implementation:

  @code python
  def primesUpTo(n):
      # Create a set with all numbers from 2 to n
      initial = {i for i in range(2, n + 1)}
      # Create the sieve
      sieve = {
          i**2 + j
          for i in range(2, n + 1)
          for j in range(0, n - i**2 + 1, i)
      }
      return initial - sieve
  @end

  Skip already removed multiples:

  @code python
  def primesUpTo(n):
      # Create a set with all numbers from 2 to n
      initial = {i for i in range(2, n + 1)}
      for i in range(2, int(n ** 0.5) + 1):
          # Create the sieve
          if i not in initial:
              continue
          sieve = {
              i**2 + j
              for j in range(0, n - i**2 + 1, i)
          }
          initial -= sieve
      return initial
  @end

* Exercício 4

  > O programa `interests.py` tem uma tabela (dicionário) com os interesses de um~
  conjunto de pessoas. Substitua as reticências por expressões adequadas para:

** Parte a)

   > Criar um dicionário com os interesses comuns a cada par de pessoas. Ou seja, a~
   cada par de pessoas, deve associar o conjunto dos interesses comuns a ambos.~
   Note que se incluir o par (X, Y) não deve incluir (Y, X).

   @code python
   commoninterests = {
       (p1, p2): ints1 & interests[p2]
       # Iterate over all people's interests and store iteration index
       for i, (p1, ints1) in enumerate(interests.items())
       # Cast the dictionary to a list (containing the keys) and skip to the
       # people that are before the current person we are iterating
       for p2 in list(interests)[i + 1 :]
   }
   @end

** Parte b)

   > Achar o maior número de interesses em comum.

   @code python
   maxCI = max(len(ints) for ints in commoninterests.values())
   @end

** Parte c)

   > Criar uma lista dos pares de pessoas que têm o número máximo de interesses comuns.

   @code python
   maxmatches = [pair for pair, ints in commoninterests.items() if len(ints) == maxCI]
   @end

** Parte d)

   > Criar uma lista de pares de pessoas com menos de 25% de similaridade de~
   interesses. Para medir a similaridade, use o~
   {índice de Jaccard}[https://en.wikipedia.org/wiki/Jaccard_index]~
   entre dois conjuntos, que é dado pela razão entre o tamanho da interseção e o~
   tamanho da união entre os conjuntos.

   @code python
   lowJaccard = [
       pair
       # Iterate over all the pairs and their intersection
       for pair, ints in commoninterests.items()
       # Calculate the ratio between the intersection's size and the union size
       # and only add to the list if it's smaller than 0.25 (25%)
       if len(ints) / len(interests[pair[0]] | interests[pair[1]]) < 0.25
   ]
   @end
