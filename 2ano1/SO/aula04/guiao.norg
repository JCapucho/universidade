@document.meta
title: Aula 04
description: Funções e arrays em bash
author: João Capucho
@end

* Exercício 1

** Parte A

   > Crie o script `aula04e01.sh` com o conteúdo seguinte; execute-o e
	 interprete o resultado.

   @code sh
   #!/usr/bin/env bash
   function imprime_msg()
   {
   	echo "A minha primeira funcao"
   	return 0
   }
   imprime_msg
   @end

** Parte B

   > Acrescente ao script anterior uma função que permita mostrar a data de
	 hoje, o nome do PC onde está a trabalhar e o nome do utilizador.

   @code sh
   #!/usr/bin/env bash
   function imprime_msg()
   {
   	echo "A minha primeira funcao"
   	return 0
   }

   function imprime_info()
   {
   	echo "Data: $(date)"
   	echo "PC: $(hostname)"
   	echo "Utilizador: $(whoami)"
   	return 0
   }

   imprime_msg
   imprime_info
   @end

** Parte C

   > Altere o script anterior de modo a implementar as funções num ficheiro
	 separado.

   No ficheiro `functions.sh`:

   @code sh
   function imprime_msg()
   {
   	echo "A minha primeira funcao"
   	return 0
   }

   function imprime_info()
   {
   	echo "Data: $(date)"
   	echo "PC: $(hostname)"
   	echo "Utilizador: $(whoami)"
   	return 0
   }
   @end

   Depois no script:

   @code sh
   #!/usr/bin/env bash
   source ./functions.sh

   imprime_msg
   imprime_info
   @end

** Parte D

   > Defina a função `dw()`, na própria bash do terminal (sem criar um script),
	 que executa os comandos `date` e `who` em sequência.

   @code sh
   [capucho@capucho:~]$ dw() {
   > date
   > who
   > }
   [capucho@capucho:~]$ dw
   Thu Oct 12 03:20:47 PM WEST 2023
   capucho  tty3         2023-10-12 14:06
   @end

* Exercício 2

** Parte A

   > Crie o script `aula04e02.sh` com o seguinte conteúdo; execute-o passando
	 um número entre 1 e 5 e interprete o resultado.

   @code sh
   #!/usr/bin/env bash
   function numeric_to_string()
   {
   	case "$1" in
   		1)
   			echo "Um"
   			;;
   		2)
   			echo "Dois"
   			;;
   		3)
   			echo "Três"
   			;;
   		*)
   			echo "Outro numero"
   	esac
   	return 0
   }

   numeric_to_string $1
   @end

** Parte B

   > Com base no que já aprendeu sobre a utilização do valor de retorno de um
	 comando ($?), como acha que pode avaliar o valor de retorno de uma função?

   > Altere a função anterior de modo a que esta devolva, através do valor de
	 retorno, um número igual ao valor passado como argumento e mostre como
	 acede a esse valor após a chamada à função.

   @code sh
   function numeric_to_string()
   {
   	case "$1" in
   		1)
   			echo "Um"
   			;;
   		2)
   			echo "Dois"
   			;;
   		3)
   			echo "Três"
   			;;
   		*)
   			echo "Outro numero"
   	esac
   	return "$1"
   }

   numeric_to_string $1
   echo "O número passado foi $?"
   @end

** Parte C

   > Defina a função `ret()`, na própria bash do terminal (sem criar um
	 script), que lhe permita, através de vários testes, determinar a gama de
	 valores de retorno de uma função bash.

   @code sh
   [capucho@capucho:~]$ function ret {
   > 	test_return() { return "$1"; }
   >
   > 	for i in {-1000..0}; do
   > 		test_return "$i"
   > 		if [ "$?" -eq "$i" ]; then
   > 			echo "Lower bound: $i"
   > 			break
   > 		fi
   > 	done
   >
   > 	for i in {0..1000}; do
   > 		test_return "$i"
   > 		if [ "$?" -ne "$i" ]; then
   > 			echo "Upper bound: $(($i - 1))"
   > 			break
   > 		fi
   > 	done
   > }
   [capucho@capucho:~]$ ret
   Lower bound: 0
   Upper bound: 255
   @end

   > Qual é essa gama?
